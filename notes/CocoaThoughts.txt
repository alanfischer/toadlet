-- Cocoa windows, RenderWindows, the code behind them, and toadlet --

Problem:
	The basic problem seems to be that in OSX & iPhone, to correctly
	do windows, we need to use Cocoa.  To correctly use cocoa, we need
	to call UIApplicationMain and use nib files.

	So that means at the main() level, our applications have deviated.

	Is this a big deal?
		- No, since our applications have already deviated for windows
		  and NDS.  Only linux really has the clean main()

	* So we need to embrace the fact that our applications main will be different.


Implications:
	We have a lot of backing code behind the RenderWindows that let
	users use a unified interface to create Direct3D and OpenGL windows to
	render to.

	This needs to be redesigned I believe.

	Right now we destroy the render window, and recreate a new one of
	opengl or direct3d type.  This is somewhat dirty, since we really
	should just be destroying the rendering 'context' of the window,
	and creating a new context and reattaching it to that window.

	Benefits
		-This would let us easily unify the 'windowing code', since a window
		 would then just be a window for that platform, devoid of content.
		 Then you would add a context to that window for d3d or ogl.

		-new_Window()

		-new_RenderView()

		-new_RenderContext()


	Window *window=new_Window();
	RenderContext *renderContext=new_RenderContext();
	window->attach(renderContext);
	renderer->startup(renderContext);
	window->getChild(0);

	// We will include standard methods for now
	new_RenderWindow()
	new_D3D9RenderWindow()
	new_D3DMRenderWindow()
	new_GLRenderWindow()

	// Do these methods create a windowing "node"?
	WGLRenderContext *context=new_WGLRenderContext()
		context startup??
		context->getHWND();
	EGLRenderContext *context=new_EGLRenderContext()
		context->getHWND();
	EAGLRenderContext *context=new_EAGLRenderContext();
		context->getUIView();
