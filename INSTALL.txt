   *** The toadlet INSTALL file, generated from the toadlet wiki ***

=Introduction=

Toadlet is built with the cmake build system. It has a number of optional dependencies, all of which are searched for or set using cmake. Toadlet also has a number of different configuration options available. 

=Contents=
  * [#Dependencies]
  * [#Setup]
  * [#Options]
  * [#Building]
    * [#Windows]
    * [#WinCE]
    * [#Posix_Systems]
    * [#OSX]
    * [#iOS]
    * [#Android]
    * [#Blackberry]
    * [#Doxygen]

=Dependencies=

==Required==
  * cmake 2.8.4 or greater

==Optional==

toadlet_egg:
  * libpng
  * libjpeg
  * libgif
  * libzlib
  * libzzip

toadlet-peeper:
  * GLEW and OpenGL
  * Direct3D Mobile (WinCE only)
  * Direct3D 9 (Windows only)
  * DirectX 10 (Windows only)
  * DirectX 11 (Windows only)

toadlet-ribbit:
  * OpenAL
  * Ogg Vorbis
  * Sidplay

toadlet-tadpole:
  * Freetype
  * MiniXML
  * Gdiplus (Windows only)

toadlet-pad:
  * X11 (posix only)

=Setup=

Toadlet uses CMake to greatly simplify the task of building it for the large number of supported platforms. If you are unfamiliar with CMake, better read up on it first: http://www.cmake.org

We recommend using out of source builds with toadlet. Simply create a subdirectory within the toadlet project (eg build.win when building for Windows) and enter that directory. You should create separate build subdirectories for each platform specific build of toadlet. (eg build.wince or build.osx).

Also, toadlet supports some additional options, such as fixed point math,
TOADLET_FIXED_POINT, that you might want to use in your build directory naming, eg: build.wince.fixed

On Windows platforms, cmake needs to be aware of your Visual Studio installation to create project files. Typically, it is best to open up a  Visual Studio console to enter the cmake commands that follow. (eg. Start-> Programs->Visual Studio->Tools->Console or something similar.)

=Options= 

The following options may be set using cmake to control the build of toadlet. Many of these are platform specific, default options are listed first.

*TOADLET_PLATFORM_WINCE* OFF/ON _Enables WinCE build (Windows only - enabled through Toolchain)_

*TOADLET_PLATFORM_ANDROID* OFF/ON _Enables android build_

*TOADLET_PLATFORM_BLACKBERRY* OFF/ON _Enables blackberry build (Windows only)_

*TOADLET_PLATFORM_IPHONE* OFF/ON _Enables iOS build (OSX only - enabled through Toolchain)_

*TOADLET_BUILD_DOXYGEN* OFF/ON _Add Doxygen documentation to build_

*TOADLET_BUILD_DOXYGEN_ONLY* OFF/ON _Only build Doyxgen documentation_

*TOADLET_FIXED_POINT* OFF/ON _Switches to fixed point math in toadlet_

*TOADLET_SPLIT_JARS* OFF/ON _Splits the android/blackberry builds into separate jars for each library_

*TOADLET_USE_BLUETOOTH* ON/OFF _Enables Bluetooth support_

*TOADLET_DYNAMIC_MULTITHREAD_DYNAMIC* ON/OFF _Uses the /MD compile switch with dynamic libraries (Windows only)_

*TOADLET_STATIC_MULTITHREAD_DYNAMIC* OFF/ON _Uses the /MD compile switch with static libraries (Windows only)_

*TOADLET_RTTI* ON/OFF _Enable Run Time Type Information_

*TOADLET_EXCEPTIONS* ON/OFF _Enable Exception handling_

=Building=

The minimum arguments to CMake for toadlet are (where .. is the location of  the base of the toadlet project):

  cmake ..

This will build and install toadlet into the default install locations. We STRONGLY recommend specifiying your header and library installation path via the following:

  cmake -DCMAKE_INSTALL_PREFIX=path/to/wherever ..

This way you can place different platform builds of toadlet into different locations. 

Sometimes the toadlet dependices will be installed into non-standard paths which cmake does not autmatically find. (This is typical on
Windows platforms). You can instruct cmake to seach additional directories for the dependencies with the following:

  cmake -DCMAKE_PREFIX_PATH=additional/directories/to/search ..

You can specify multiple paths my separating them with a colon : between each one on windows systems and a ; on posix systems.

Finally, on certain systems (like posix) cmake requires you to determine the type of build (debug/release/etc) when calling cmake. You can set this up by calling:

  cmake -DCMAKE_BUILD_TYPE=Buildtype ..

Where Buildtype can be either Debug or Release.

==Windows==

On windows systems, toadlet usually needs to be told where to find the dependencies. Otherwise the setup is straightforward:

  cmake -DCMAKE_INSTALL_PREFIX=%HOME%\toadlet\win32 -DCMAKE_PREFIX_PATH="C:\Program Files" ..

Open up Visual Studio on toadlet.sln and do the rest.

==WinCE==

Toadlet also builds for WinCE using cmake toolchain files. In addition, you have to do a 2 step process since cmake cannot yet change the platform build type in Visual Studio 8 and up. 

First you call a cmake build normally with the toolchain file and the special UPDATE_WINCE variable off. Then you call cmake again with UPDATE_WINCE on. Ignore the complaints it makes, you're ready to go. Otherwise the WinCE build is similar to the win32 build:
   
  cmake -DCMAKE_TOOLCHAIN_FILE=..\cmake\Toolchains\WindowsCE.cmake -DCMAKE_INSTALL_PREFIX=%HOME%\toadlet\wince -DCMAKE_PREFIX_PATH="C:\Program Files\Microsoft Visual Studio 8\SmartDevices\SDK\PocketPC2003" -DUPDATE_WINCE=OFF ..

  cmake -DUPDATE_WINCE=ON ..

Now the visual studio project is setup for the proper platform build.

==Posix Systems==

On posix systems don't forget to set the build type if you are using makefiles. A typical command might look like:

  cmake -DCMAKE_INSTALL_PREFIX=$HOME/toadlet/posix -DCMAKE_BUILD_TYPE=Release ..

Now the standard 'make install' command will do the rest.

==OSX==

Toadlet for OSX is easy to build using Xcode Projects. You only need to make sure you tell cmake to use the Xcode generator with the -G switch as follows:

  cmake -GXcode -DCMAKE_INSTALL_PREFIX=$HOME/toadlet/osx  ..

If you wish to build a universal binary, you may specify additional architectures as such:

  cmake -GXcode -DCMAKE_OSX_ARCHITECTURES="i386;ppc" -GDCMAKE_INSTALL_PREFIX=$HOME/toadlet/osx ..

Valid options for architectures are: i386, ppc, x86_64, ppc64

If you encounter link issues with regards to the dependencies mxml or glew, use the included CMakeLists.txt files in cmake/Dependencies to build these projects using Xcode, again specifying all the architectures you wish to use. Or, you can follow the instructions below to manually tweak their existing build systems.

===OSX Dependencies===

To build GLEW as a universal binary, you must edit glew/config/Makefile.darwin Change the CC and LD lines as follows:

  CC = cc -arch i386 -arch ppc
  LD = cc -arch i386 -arch ppc

To build MiniXML as a universal binary, run it's configure script as follows:

  CFLAGS="-arch i386 -arch ppc" LDFLAGS="-arch i386 -arch ppc" ./configure --prefix=$HOME/mxml

The same valid architectures are as above is OSX

==iOS==

Toadlet is avaialble for the iOS platform using Toolchain files. Note that dependency checking will find the system osx libraries if the iOS SDK ones are not found. Make sure you setup your CMAKE_PREFIX_PATH to avoid this. 

Much like with WinCE, cmake's generated Xcode build will be for the wrong platform. You need to manually update. First call cmake  with the toolchain file and the special UPDATE_IPHONE variable off. Then you call cmake again with UPDATE_IPHONE on.

  cmake -GXcode -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchains/iPhoneOS.cmake -DCMAKE_INSTALL_PREFIX=$HOME/iPhoneOS -DCMAKE_PREFIX_PATH=$HOME/toadlet/iphone/deps -DUPDATE_IPHONE=OFF ..

  cmake -DUPDATE_IPHONE=ON ..

To use the iPhoneSimulator, just point CMake to the iPhoneSimulator toolchain file.

  cmake -GXcode -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchains/iPhoneSimulator.cmake -DCMAKE_INSTALL_PREFIX=$HOME/iPhoneOS -DCMAKE_PREFIX_PATH=$HOME/toadlet/iphone/deps -DUPDATE_IPHONE=OFF ..

NOTE1: Be sure you set your xcodeproject to use the same iPhoneOS SDK that cmake found!


==Android==

When building for android, you need to specify the android.jar for the android sdk you wish to build against, using ANDROID_JAR. 

  cmake -DCMAKE_INSTALL_PREFIX=$HOME/toadlet/android -DTOADLET_PLATFORM_ANDROID=ON -DANDROID_JAR=$HOME/android/android.jar ..
	
On Windows systems, the Visual Studio generators for cmake java tend to be annoying to use, since Visual Studio wants to edit the already preprocessed java files instead of the original source files. 

Instead, use the nmake generators an run command line builds, and a separate editor for the .java sources. It is so much nicer to use.

  cmake -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX=$HOME/toadlet/android -DTOADLET_PLATFORM_ANDROID=ON -DANDROID_JAR=$HOME/android/android.jar ..

Posix builds on Android are straightforward.

==Blackberry==

Blackberry builds are very similar to the android builds, except you need to specify the location of your blackberry JDE using BLACKBERRY_JDE_DIR. Again, we strongly recommend using the nmake generators on Windows platforms to run a command line build.

  cmake -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX=$HOME/toadlet/blackberry -DTOADLET_PLATFORM_BLACKBERRY=ON -DBLACKBERRY_JDE_DIR=$HOME/blackberryJDE ..

==Doxygen==

Optionally, you can build the toadlet Doxygen documentation when creating your project. You can either add the doxygen build with the TOADLET_BUILD_DOXYGEN flag:

  cmake -DTOADLET_BUILD_DOXYGEN=ON <rest of your cmake commands> ..

Or, you can only build the doxygen files by themselves using TOADLET_BUILD_DOXYGEN_ONLY. Useful if you don't want to rebuild the whole library.

  cmake -DTOADLET_BUILD_DOXYGEN_ONLY=ON ..

Note: You'll need the Doxygen tool installed, and
we recommend the Graphviz package for the dot graph
generator.

http://www.stack.nl/~dimitri/doxygen/

http://www.graphviz.org
